#!/usr/local/bin/perl
binmode STDOUT, ':utf8';
use strict;
use Getopt::Long;
use JSON;
use File::Basename;
my $dirname  = dirname(__FILE__);
require "$dirname/word-wiktionary.pl";
require "$dirname/word-aonaware.pl";
require "$dirname/word-wordnet.pl";
require "$dirname/word-urbandict.pl";
my $opt_t=0;
my $opt_dict="(wiktionary|wordnet|urbandict)";
my $tlang="Russian";
my $opt_all=0;
my @sources = (
    { name => "aonaware", handler => \&query_aonaware }
    , { name => "wiktionary", handler => \&query_wiktionary }
    , { name => "wordnet", handler => \&query_wordnet }
    , { name => "urbandict", handler => \&query_urbandict }
);
my @source_names=map { $_->{name} } @sources;
my $usage =
    "$0 <word> [-l] [-t]
    -t         show translation (default:definition)
    -a         choose all dictionaries
    -tlang     regex for target language (default: $tlang)
    -v         verbosity level (additional -v's increase verbosity)
    -dict      regex of dictionaries to use (default: $opt_dict)
                  could be " . join(", ",@source_names) . ", or '.*' or all
    -h|--help  display this help
\n";
sub help { print $usage; exit(1); }
GetOptions(
    "-t" => \$opt_t
    , "-a" => \$opt_all
    , "dict=s" => \$opt_dict
    , "h|help" => \&help
    ) or die $usage;

# get all arguments from command line, joined by space
my $word = join(" ",@ARGV);

if ($opt_dict eq "all") {
    $opt_dict = ".*";
}

# -a - increase verbosity and go for all dictionaries
if ($opt_all) {
    $opt_dict = ".*";
}

#-------------------------------------------------------------------------------

# return string $_[0] with at most $_[1] lines
sub limitlines($$) {
    my $ret="";
    my $idx=0;
    foreach my $line(split(/\n/,$_[0])) {
	$ret .= $line."\n";
	$idx++;
	last if ($idx >= $_[1]);
    }
    return $ret;
}

#-------------------------------------------------------------------------------

# return string $_[0] indented by string $_[1] 
sub indented($$) {
    my $ret="";
    foreach my $line(split(/\n/,$_[0])) {
	$ret .= $_[1] . $line . "\n";
    }
    return $ret;
}

#-------------------------------------------------------------------------------
# fetch JSON from given URL, return parsed object
sub fetch_json {
    my $url=$_[0];
    my $text=`curl -s '$url'`;
    if ($ENV{VERBOSE}>0){
	print "curl -s '$url'\n";
	print "$text\n";
    }
    my $obj= decode_json( $text);
    return $obj;
}

#--------------------------------------------------------------------------------

sub clean_lynx($) {
    my $line=$_[0];
    # clean up the line...
    # remove lynx link annotations
    $line =~ s/\[\d+\]//g;
    # replace leading * (unix-unfriendly) with -
    $line =~ s/(^\s+)\*/$1-/;
    $line =~ s/\s+$//; # strip trailing whitespace
    return $line;
}

#--------------------------------------------------------------------------------

sub log_word($) {
    if (open my $W, ">>log/word") {
	use POSIX;
	my $timestamp = POSIX::strftime("%Y/%m/%dT%H:%M:%S", localtime);
	print $W "timestamp:$timestamp  word:'$_[0]'\n";
    }
}

#--------------------------------------------------------------------------------

# sanitize
$word =~ s/["`&*?]+//g; 
$word =~ s/ /%20/g;
my $ndict=0;
foreach my $source(@sources) {
    if ($source->{name} =~ /$opt_dict/) {
	if ($ndict>0) {
	    print "\n";
	}
	$ndict++;
	# result is an object with fields definition, etc.
	my $ret = $source->{handler}->($word);
	my $out="";
	if ($ret) {
	    $out .= $ret->{definition};
	}
	if ($out) {
	    print "Source $source->{name}:\n";
	    print $out;
	    log_word($word);
	}
    }
}

